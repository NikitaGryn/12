#include <iostream>
#include <vector>
#include <utility>

using namespace std;

void printSetLn(vector<int> vec)
{
	if (vec.size() == 0)
	{
		cout <<"{ }";
		return;
	}

	cout << "{";
	for (int i = 0; i < vec.size() - 1; i++)
	{
		cout << vec[i] << ", ";
	}
	cout << vec[vec.size() - 1] << "}" << endl;
}

void printCortegeSetLn(vector < pair<int, int >> vec) //TODO: remake the function
{
	if (vec.size() == 0)
	{
		cout << "{ }";
		return;
	}

	cout << "{";
	for (int i = 0; i < vec.size() - 1; i++)
	{
		cout << "<" << vec[i].first << ", " << vec[i].second << ">, ";
	}
	cout << "<" << vec[vec.size() - 1].first << ", " << vec[vec.size() - 1].second << ">}" << endl;
}

int main()
{
	setlocale(LC_ALL, "Russian");
	int mode;

	cout << "Выберите способ задания множеств:\n\t1 - Перечисление\n\t2 - Высказывание\nВаш выбор: ";
	cin >> mode; // Пользователь выбирает способ задания множеств

	vector<int> first, second;

	switch (mode)
	{
	case 1: // Если пользователь выбирает способ задания множеств перечислением
	{
		int c1, c2;
		cout << "Введите мощность первого множества A: ";
		cin >> c1; // Пользователь задает мощность первого множества
		cout << "Задайте первое множество A: ";
		for (int i = 0; i < c1; i++) // Пользователь задает первое множество
		{
			int e;
			cin >> e;
			first.push_back(e);
		}

		cout << "Введите мощность второго множества B: ";
		cin >> c2; // Пользователь задает мощность второго множества
		cout << "Задайте второе множество: ";
		for (int i = 0; i < c2; i++) // Пользователь задает второе множество
		{
			int e;
			cin >> e;
			second.push_back(e);
		}
		break;
	}
	case 2:
	{
		int c1, c2;
		cout << "Введите мощность множества А: ";
		cin >> c1; // Пользователь задает мощность первого множества А

		for (int x = 1; x <= c1; x++) // Присваиваем значение x = 1
		{
			int a;
			a = 4*x-4; // Вычисляем значение а по формуле, подставляя текущее значение х
			first.push_back(a); // Переносим значение а во множество А
			// Если значение х больше n, то множество задано
			// x = x + 1
		}

		cout << "\nA = ";
		printSetLn(first); // Выведем на экран полученное множество A

		cout << "Введите мощность множества B: ";
		cin >> c2; // Пользователь задает мощность первого множества B

		for (int x = 1; x <= c2; x++) // Присваиваем значение x = 1
		{
			int a;
			a = x + 13; // Вычисляем значение b по формуле, подставляя текущее значение х
			second.push_back(a); // Переносим значение b во множество B
			// Если значение х больше m, то множество задано
			// x = x + 1
		}

		cout << "\nB = ";
		printSetLn(second); // Выведем на экран полученное множество B
		break;
	}
	default:
		cout << "Ошибка выбора";
		exit(1);
		break;
	}
	cout << "Выберите операцию из списка:\n\t1 - Объединение А и В\n\t2 - Пересечение А и В\n\t";
	cout << "3 - Разность А и В\n\t4 - Разность В и А\n\t5 - Симметрическая разность А и В\n\t";
	cout << "6 - Дополнение множества А\n\t7 - Дополнение множества В\n\t8 - Декартово произведение А и В\n\t";
	cout << "9 - Декартово произведение В и А\nВаш выбор: ";
	cin >> mode; // Пользователь задаёт операцию
	switch (mode)
	{
	case 1: // Если пользователь хочет найти объединение множеств А и В
	{
		vector<int> d; // Создаем новое пустое множество D
		d = first; // Каждый элемент множества А переносим в множество D
		for (int i = 0; i < second.size(); i++) { // Возьмём первый элемент множества В

			bool add = true;

			for (int j = 0; j < d.size(); j++) { // Возьмём первый элемент множества D

				if (second[i] == d[j]) {
					add = false;
					break;
				}// Если взятый элемент множества В равен взятому элементу D
				// то, перейдём к следующему элементу В или закончим
				// Если элемент множества D не последний, возьмём следующий элемент множества D
			}

			if (add) { d.push_back(second[i]); } // Если элемент множества D - последний, то добавим взятый элемент множества В в D
		}

		cout << "\nD = "; printSetLn(d); // Выведем на экран полученное множество D
		break;
	}

	case 2: // Если пользователь хочет найти пересечение множеств А и
	В:
	{
		vector<int> d; // Создаем новое пустое множество D
		for (int i = 0; i < first.size(); i++) // Возьмём первый элемент множества А
		{
			for (int j = 0; j < second.size(); j++) // Возьмём первый элемент множества В
			{
				if (first[i] == second[j]) { d.push_back(first[i]); } // Если взятый элемент А равен взятому эл.
				// множества В, то добавим его в D

				// Если не равен взятому В, то возьмём следующий элемент множества В, если тот не последний
			}
			// Если взятый элемент множества В - последний, то возьмём следующий элемент множества А

		}
		// Если взятый элемент множества А - последний, то выведем полученное множество на экран
		cout << "\n D = "; printSetLn(d); // Выведем на экран полученное множество D
		break;
	}
	case 3:
	{
		vector<int> d; // Создаем новое пустое множество D
		for (int i = 0; i < first.size(); i++) // Возьмём первый элемент множества А
		{
			bool add = true;
			for (int j = 0; j < second.size(); j++) // Возьмём первый элемент множества В
			{
				if (first[i] == second[j]) { add = false; break; } // Если взятый элемент А равен вз. элементу В, возьмём след. эл. А
				// Если взятый элемент множества В не явл. последним, то возьмём следующий эл. мн. В
			}
			if (!add) { continue; }
			d.push_back(first[i]);// Если вз. эл. множества В - последний, то добавим вз. элемент множества А во мн. D
		}
		// Если элемент мн. А - не последний, возьмём след. эл. мн. А
		cout << "\n D = "; printSetLn(d); // Выведем на экран полученное множество D
		break;
	}
	case 4:
	{
		vector<int> d; // Создаем новое пустое множество D
		for (int i = 0; i < second.size(); i++) // Возьмём первый элемент множества B
		{
			bool add = true;
			for (int j = 0; j < first.size(); j++) // Возьмём первый элемент множества A
			{
				if (second[i] == first[j]) { add = false; break; } // Если взятый элемент B равен вз. элементу A, возьмём след. эл. B
				// Если взятый элемент множества A не явл. последним, то возьмём следующий эл. мн. A
			}
			if (!add) { continue; }
			// Если вз. эл. множества A - последний, то добавим вз. элемент множества B во мн. D
			d.push_back(second[i]);
			// Если элемент мн. B - не последний, возьмём след. эл. мн. B
		}
		cout << "\nD = "; printSetLn(d); // Выведем на экран полученное множество D
		// Если эл. мн. B - последний, выведем на экран мн. D
		break;
	}
	case 5:
	{
		vector<int> d; // Создаем новое пустое множество D

		// Разность множеств А и В

		vector<int> c; // Создадим пустое множество С
		for (int i = 0; i < first.size(); i++) // Возьмём первый элемент множества А
		{
			bool add = true;
			for (int j = 0; j < second.size(); j++) // Возьмём первый элемент множества В
			{
				if (first[i] == second[j]) {
					add = false;
					break;
				} // Если взятый элемент А равен вз. элементу В, возьмём след. эл. А

				// Если взятый элемент множества В не явл. последним, то возьмём следующий эл. мн. В
			}
			if (!add) { continue; }
			// Если вз. эл. множества В - последний, то добавим вз. элемент множества А во мн. C
			c.push_back(first[i]);
			// Если элемент мн. А - не последний, возьмём след. эл. мн. А
		}

		// Разность множеств В и А

		vector<int> f;// Создадим новое пустое множество F

		for (int i = 0; i < second.size(); i++) // Возьмём первый элемент множества B
		{
			bool add = true;
			for (int j = 0; j < first.size(); j++)// Возьмём первый элемент множества A
			{
				if (second[i] == first[j]) { add = false; break; } // Если взятый элемент B равен вз. элементу A, возьмём след. эл. B
				// Если взятый элемент множества A не явл. последним, то возьмём следующий эл. мн. A
			}
			if (!add) { continue; }
			// Если вз. эл. множества A - последний, то добавим вз. элемент множества B во мн. F
			f.push_back(second[i]);
			// Если элемент мн. B - не последний, возьмём след. эл. мн. B
		}

		// Объединение множеств C и F

		d = c; // Создаём новое пустое множество D. Каждый элемент множества C переносим в множество D

		for (int i = 0; i < f.size(); i++) // Возьмём первый элемент множества F
		{
			bool add = true;
			for (int j = 0; j < d.size(); j++) // Возьмём первый элемент множества D
			{
				if (f[i] ==
					d[j]) {
					add = false; break;
				}
			}// Если взятый элемент множества F равен взятому элементу D
			// то, перейдём к следующему элементу F или закончим

			// Если элемент множества D не последний, возьмём следующий элемент множества D
			if (add) { d.push_back(f[i]); }// Если элемент множества D - последний, то добавим взятый элемент множества В в D
		}
		cout << "\nD = "; printSetLn(d); // Выведем на экран полученное множество D
		break;
	}

	case 6:
	{
		vector<int> u; // Зададим множество U

		for (int x = 1; x <= 1000; x++) // Присвоим значение x = 1
			u.push_back(x); // Если x > 100, U задано

		vector<int> d; // Создаем новое пустое множество D
		for (int i = 0; i < u.size(); i++) // Возьмём первый элемент множества U
		{
			bool add = true;
			for (int j = 0; j < first.size(); j++) // Возьмём первый элемент множества A
			{
				if (u[i] == first[j]) { add = false; break; } // Если взятый элемент U равен вз. элементу A, возьмём след. эл. U

				// Если взятый элемент множества A не явл. последним, то возьмём следующий эл. мн. A
			}
			if (!add) { continue; }
			// Если вз. эл. множества A - последний, то добавим вз. элемент множества U во мн. D
			d.push_back(u[i]);
			// Если элемент мн. U - не последний, возьмём след. эл. мн. U
		}
		cout << "\nD = "; printSetLn(d); // Выведем на экран полученное множество D
		break;
	}
	case 7:
	{
		vector<int> u; // Зададим множество U
		for (int x = 1; x <= 1000; x++) { // Присвоим значение x = 1
			u.push_back(x);// Если x > 100, U з адано
			// x = x + 1
		}

		vector<int> d; // Создаем новое пустое множество D
		for (int i = 0; i < u.size(); i++) // Возьмём первый элемент множества U
		{
			bool add = true;
			for (int j = 0; j < second.size(); j++) // Возьмём первый элемент множества B
			{
				if (u[i] == second[j]) { add = false; break; }// Если взятый элемент U равен вз. элементу B, возьмём след. эл. U

				// Если взятый элемент множества B не явл. последним, то возьмём следующий эл. мн. B
			}
			if (!add) { continue; }
			// Если вз. эл. множества B - последний, то добавим вз. элемент множества U во мн. D
			d.push_back(u[i]);
			// Если элемент мн. U - не последний, возьмём след. эл. мн. U
		}
		cout << "\nD = "; printSetLn(d); // Выведем на экран полученное множество D
		break;
	}
	case 8:
	{
		vector < pair<int, int >> d; // Создадим новое пустое множество D
		for (int i = 0; i < first.size(); i++) // Возьмём первый элемент множества А
		{
			for (int j = 0; j < second.size(); j++) // Возьмём первый элемент множества В
			{
				d.emplace_back(first[i], second[j]); // Создаём кортеж из двух элементов, первый - вз. эл. А, второй - вз. эл. В
				// Возьмём следующий элемент множества В
			}
			// Если элемент множества В - последний, возьмём следующий элемент множества А
		}
		// Если элемент множества А - последний, выведем на экран полученное множество
		printCortegeSetLn(d);
		break;
	}
	case 9:
	{
		vector < pair<int, int >> d; // Создадим новое пустое множество D
		for (int i = 0; i < second.size(); i++) // Возьмём первый элемент множества B
		{
			for (int j = 0; j < first.size(); j++) // Возьмём первый элемент множества A
			{
				d.emplace_back(first[j], second[i]); // Создаём кортеж из двух элементов, первый - вз. эл. B, второй - вз. эл. A
				// Возьмём следующий элемент множества A
			}
			// Если элемент множества A - последний, возьмём следующий элемент множества B
		}
		// Если элемент множества B - последний, выведем на экран полученное множество
		printCortegeSetLn(d);
		break;
	}
	default:
		cout << "Ошибка выбора";
		exit(1);
		break;
	}
}